#!/usr/bin/env bash


profile_name="$HOME"/.zprofile
if ! [[ -f "$profile_name" ]]; then
    profile_name="$HOME"/.zshrc
fi

if ! [[ "$SHELL" == "/bin/zsh" ]]; then
    echo $SHELL
    profile_name="$HOME"/.bash_profile
    if ! [[ -f "$profile_name" ]]; then
        profile_name="$HOME"/.bashrc
    fi
fi

source "$profile_name"

function cmd_help() {
    echo "goenv is a tool for you to manage your go version.

Usage:

    goenv [commands] [version]

The commands are:

    remote      list golang versions from golang.org.
    list        list local go versions.
    install     install a certain go. eg: goenv install 1.11.5.
    use         change local go version. eg: goenv use 1.11.5.
    current     show current go version.
    version     show goenv version.
    help        show help.
"
}

if [[ "$1" == "" ]]; then
    cmd_help $@
    exit 0
fi

dirname=sdk
base_path="$HOME"/"$dirname"

os_name=$(uname -a)
os_version=darwin-amd64

if [[ "$os_name" == "Linux" ]]; then
    os_version=linux-amd64
fi

go_version=go"$2"

function get_version() {
    if [[ "$2" == "" ]]; then
        return
    fi

    if [[ ${2:0:2} == "go" ]]; then
        go_version=$2
    fi
}

get_version $@

basename="$go_version"."$os_version".tar.gz

if [[ "$GOROOT" != "$base_path"/go ]]; then
    echo 'export GOROOT="$HOME/sdk/go"' >> "$profile_name"
    echo 'export PATH="$GOROOT/bin:$PATH"' >> "$profile_name"
fi

function through_wget() {
    rm "$base_path"/"$go_version."*
    wget https://dl.google.com/go/"$basename" -P "$base_path"
    if [[ -d  "$base_path"/"$go_version" ]]; then
      rm -r "$base_path"/"$go_version"
    fi
    mkdir "$base_path"/"$go_version"

    if [[ -d  "/tmp/$go_version" ]]; then
      rm -r "/tmp/$go_version"
    fi
    mkdir "/tmp/$go_version"

    tar zxvf "$base_path"/"$basename" -C "/tmp/$go_version"
    mv "/tmp/$go_version/go"/* "$base_path"/"$go_version/"
    rm "$base_path"/"$basename"
}

function through_go() {
    go get golang.org/dl/"$go_version"
    eval "$go_version" download
}

function list_version() {
    curl https://golang.org/dl/ > "$base_path"/golang.org.dl.html
    go_versions=$(grep 'id="go[0-9].*"' "$base_path"/golang.org.dl.html | awk -F '[ "]' '{printf "    %s\n", $6}')
    echo "$go_versions"
}

function read_pkg_dir() {
    for file in "$base_path"/*
    do
        if test -d "$file"
        then
            echo "${file##*/}"
        fi
    done
}

function read_pkg() {
    pkgExists=$(ls -l $HOME | awk '{print $9}' | grep "^$dirname$")
    if [[ "$pkgExists" == "" ]]; then
        mkdir "$base_path"
    fi

    exists=$(ls -l "$base_path" | grep '^l' | awk '{print $11}')
    if [[ "$exists" == ""  ]]; then
        ls -l "$base_path" | grep '^d' | awk '{print $9}'
    else
        ls -l "$base_path" | grep '^l' | awk '{print $9 $10 $11}'

        # printf "    %s\n" $(ls -l "$basePath" | grep '^d' | grep -v "$exists" | awk '{print $9}')
        printf "    %s\n" $(ls -l "$base_path" | grep '^d' | awk '{print $9}')
    fi
}

# read go path
function read_GOPATH() {
    ls ${GOPATH%%:*}/bin | grep 'go[0-9]'
}

function cmd() {
    # remote
    if [[ "$1" == "remote" ]]; then
        list_version
    fi

    # list
    if [[ "$1" == "list" ]]; then
        read_pkg
    fi

    # install
    if [[ "$1" == "install" ]]; then
        echo "install $go_version ..."

        if [[ "$2" == "" ]];then
            echo -e "\033[31m[ERR] go version shouldn't be null !\n\033[0m"
            cmd_help
            return
        fi

        if type go >/dev/null 2>&1; then
            export GO111MODULE=off
            export GOPROXY=https://goproxy.cn
            through_go $@
        else
            through_wget $@
        fi
    fi

    # use
    if [[ "$1" == "use" ]]; then
        cd "$base_path"

        if ! [[ -d "$go_version" ]]; then
            echo -e "\033[31m[ERR] $go_version not exists.\n\033[0m"
            return
        fi

        if [[ -d ./go ]] || [[ -f ./go ]]
        then
           rm go
        fi

        ln -s "$go_version" go
    fi

    # current
    if [[ "$1" == "current" ]]; then
        go version
    fi

    # version
    if [[ "$1" == "version" ]]; then
        echo goenv 1.0.2
    fi

    # help
    if [[ "$1" == "help" ]]; then
        cmd_help
    fi
}



cmd $@